package java.parser.test;

import java.util.List;
import java.util.Arrays;

public class Test {

    private Object test1;

    private double[] test2;

    private Double[][] test3;

    private char test4;

    private int test5;

    private List test6;

    public void setTest1(Object test1) {
        this.test1 = test1;
    }

    public Object getTest1() {
        return test1;
    }

    public void setTest2(double[] test2) {
        this.test2 = test2;
    }

    public double[] getTest2() {
        return test2;
    }

    public void setTest3(Double[][] test3) {
        this.test3 = test3;
    }

    public Double[][] getTest3() {
        return test3;
    }

    public void setTest4(char test4) {
        this.test4 = test4;
    }

    public char getTest4() {
        return test4;
    }

    public void setTest5(int test5) {
        this.test5 = test5;
    }

    public int getTest5() {
        return test5;
    }

    public void setTest6(List test6) {
        this.test6 = test6;
    }

    public List getTest6() {
        return test6;
    }

    @Override()
    public int hashCode() {
        final int PRIME = 3;
        int result = 1;
        result = (result * PRIME) + test1.hashCode();
        result = (result * PRIME) + Arrays.hashCode(test2);
        result = (result * PRIME) + Arrays.deepHashCode(test3);
        result = (result * PRIME) + Character.hashCode(test4);
        result = (result * PRIME) + Integer.hashCode(test5);
        result = (result * PRIME) + test6.hashCode();
        return result;
    }

    @Override()
    public boolean equals(Object o) {
        if (o == this)
            return true;
        if (!(o instanceof Test))
            return false;
        Test other = (Test) o;
        if (!this.test1.equals(other.test1))
            return false;
        if (!Arrays.equals(this.test2, other.test2))
            return false;
        if (!Arrays.deepEquals(this.test3, other.test3))
            return false;
        if (Character.compare(this.test4, other.test4) != 0)
            return false;
        if (Integer.compare(this.test5, other.test5) != 0)
            return false;
        if (!this.test6.equals(other.test6))
            return false;
        return true;
    }
}
